#+STARTUP: content

* Post v2.0.0
- Folktale by example book
- Benchmark data structures (improve memory and CPU usage)
- Persistent structures (Map, Set, Vector, List, Stream)
- Higher-Order contracts and validation (previously core.check)
- Better Show instance (previously core.inspect)
- Default structural equality for non-ADTs (deep-equals)
- Investigate protocols/multi-methods and how they could fit in Folktale (important for multi-instance)


* v2.0.0
See =Folktale Redesign= below.
See [[ROADMAP.hs]] for the definitions being introduced.

* Folktale Redesign

** Overview

The next version of the Folktale library will be a major redesign,
which among other things aims to make functional programming more
accessible to programmers, and also make a better use features in
newer versions of ECMAScript.

** Principles

It's guided by the following principles:

- Replace currying-by-default with a heavier use of arrow functions ::
  Curried functions can be composed in several ways. And this is a good
  thing, because it means it's easier to create new functionality by
  combining existing ones. However, in an untyped language, you have no
  ways of enforcing a correct composition of functions, so currying in
  JS tends to lead to silent or late errors. Coupled with JavaScript's
  heavy use of variadic functions, and the VM's unhelpful error reporting,
  these have the potential for being very frustrating, especially 
  for people new to FP.

  ES2015 lessens a bit the burden of being more explicit with your
  composition, since arrow functions have less visual overhead, and
  can enforce some compositional constraints syntactically. They also
  side-step the problems with JavaScript's variadic functions to an
  extent.


- Provide separate free-method versions of functions ::
  JavaScript's syntax is limited, but some of the proposed additions
  to it lead to programs that are easy to read. One of them is the
  This-Binding syntax, which allows using functions in infix position:

  #+BEGIN_SRC js
    const _groupBy = (xs, f) => ...;

    function groupBy(f) {
      return _groupBy(this, f);
    }

    [1, 2, 3, 4, 5]::groupBy(isOdd)

    // Usage of other combinators also reads in a clearer way
    list.sort(compare::on(first))
  #+END_SRC
  

- Where possible, as long as laws aren't broken, reuse language's native methods ::
  This makes it easier to combine Folktale with existing projects and
  libraries, as they'd have similar expectations.


- Monolithic packages over several micro-libraries ::
  There are plenty of advantages of micro-libraries. They are more modular,
  since they have to work with less expectations, they are easier to replace,
  we can make a better use of semantic versioning, and they are easier 
  to understand.

  But there are plenty of drawbacks to them as well:

  - *They're harder to use when you need to combine more than one module*.
    For example, if you want an Either module to be able to convert its
    values to a Maybe structure, you need to provide the Either module
    with the Maybe structure to use. This, while modular, adds some
    friction for people to use these features.

  - *They're harder to maintain*. Keeping modules, tooling, and issues in
    sync between the different modules takes a lot of effort.

  - *They're less consistent*. Because each module is independent, exposes
    its own API, and evolves at its own pace, it's easy to get inconsistent
    behaviour across them. This is already the case with how methods work
    in Maybe, Either, and Validation.


- Better support for interactive (REPL) development ::
  One of the long-term goals with Folktale is to have a really good support
  for interactive development in the REPL. The first step for that is to 
  be able to view documentation directly from the REPL, which is being done
  by annotating objects for the [[https://github.com/origamitower/metamagical][Meta:Magical]] library.

  As newer features get added to Meta:Magical (like searching functions by
  examples, or by approximate type signature, like in Hoogle), Folktale and
  its users will benefit from them without having to do anything.


- Logically grouped, minimal modules ::
  Each module should be entirely self-contained, and only provide the
  absolute minimum necessary for that particular functionality. Most of
  the time this will mean ~one function = one module~, but not always
  (see the new ADT module, and [[https://github.com/siren-lang/siren/blob/master/documentation/platform-design.md][Siren's Platform Design document]] for
  examples).

  There are two reasons behind this:

  1. Extracting a minimal application from a large framework/environment
     requires full type inference in JavaScript, otherwise “tree-shaking”
     is remove dynamic features from the resulting bundle[[http://bibliography.selflanguage.org/type-inference.html][¹]] [[http://www.cs.cmu.edu/~aldrich/FOOL/FOOL1/FOOL1-report.pdf][²]]

  2. Because all modules are annotated, inline, for the Meta:Magical
     library, even modules comprised of simple functions end up being
     ~40 loc of documentation. We might be able to make this better by
     compiling a superset of JS.


- Modules are grouped in an hierarchy of categories ::
  This is mostly to make using the libraries easier given the previous
  point. Modules higher in the hierarchy should re-export all features
  below it.

